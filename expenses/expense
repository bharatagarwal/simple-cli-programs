#! /usr/bin/env ruby
require 'pg'
require 'io/console'

time = Time.now

class ExpenseData
  def initialize
    @db = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @db.exec "select * from expenses order by id"
    show_count(result.ntuples)
    display(result) if result.ntuples > 0
  end  

  def add_expense(amount, memo)
    date = Date.today

    statement = <<~HEREDOC
            insert into expenses
            (amount, memo, created_on)
            values
            ($1, $2, $3);
    HEREDOC

    @db.exec_params(statement, [amount, memo, date])
  end

  def search_expenses(term)
    statement = <<~HEREDOC
            select * from expenses
            where memo ilike $1
    HEREDOC


    result = @db.exec_params(statement, ['%' + term + '%'])
    show_count(result.ntuples)
    display(result) if result.ntuples > 0
  end

  def id_exists?(id)
    statement = <<~HEREDOC
            select * from expenses
            where id = $1
    HEREDOC

    result = @db.exec_params(statement, [id])
    result.ntuples > 0
  end

  def display_deleting_expense(id)
    puts "The following expense has been deleted:"
    statement = <<~HEREDOC
            select * from expenses
            where id = $1
    HEREDOC

    result = @db.exec_params(statement, [id])
    display(result)
  end

  def delete_expense(id)
    unless id_exists?(id)
      puts "There is no expense with id #{id}" 
      return
    end

    display_deleting_expense(id)

    statement = <<~HEREDOC
            delete from expenses
            where id = $1
    HEREDOC

    @db.exec_params(statement, [id])
  end

  def show_count(count)
    if count > 1
      puts "There are #{count} expenses."
    elsif count == 1
      puts "There is 1 expense."
    else
      puts "There are no expenses."
    end
  end

  def delete_all_expenses
    @db.exec('delete from expenses')
    puts 'All expenses have been deleted.'
  end

  def sum_of_expenses(expenses)
    format("%.2f", 
      expenses.field_values('amount').map(&:to_f).sum)
  end

  def display(expenses)
    expenses.each do |tuple|
      output_column = [ 
                        tuple["id"].rjust(3),
                        tuple["created_on"].rjust(10),
                        tuple["amount"].rjust(12),
                        tuple["memo"]
                      ]
                      
      puts output_column.join(' | ')
    end

    puts "--------------------------------------------------"
    puts "Total"  + sum_of_expenses(expenses).rjust(26)
  end

  def create_table
    statement = <<~HEREDOC
      create table expenses (
        id serial primary key,
        amount numeric(6,2) not null check (amount >= 0.01),
        memo text not null,
        created_on date not null
      );
    HEREDOC

    @db.exec(statement)
  end

  def setup_schema
    statement = <<~HEREDOC
            select count(*) from information_schema.tables
            where table_schema = 'public' and table_name = 'expenses'
    HEREDOC

    result = @db.exec(statement)
    create_table if result.first['count'] == '0'
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when 'add'
      amount, memo = arguments[0], arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when 'list'
      @application.list_expenses
    when 'search'
      term = arguments[0]
      @application.search_expenses(term)
    when 'delete'
      deletion_id = arguments[0]
      @application.delete_expense(deletion_id)
    when 'clear'
      return unless confirm_deletion
      @application.delete_all_expenses
    else
      display_help
    end
  end

  def confirm_deletion
    puts "This will remove all expenses. Are you sure? (y/n)"
    decision = $stdin.getch
    decision == 'y'
  end

  def display_help
  puts <<~SQUIGGLY
    An expense recording system
      
    Commands:
    
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    SQUIGGLY
  end
end

CLI.new.run(ARGV)